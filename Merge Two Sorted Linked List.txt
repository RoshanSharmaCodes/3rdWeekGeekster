class Node{
    constructor(val){
        this.value = val;
        this.next = null;
    }
}

class LinkedList{
    constructor(){
        this.head = null;
        this.tail = null;
    }
    
    
    insert(val){
        var node = new Node(val);
        if(!this.head){
            this.head = node;
            this.tail = node;
        }
        this.tail.next = node;
        this.tail = node;
    }
    
    print(){
        var arr = [];
        var curr = this.head;
        while(curr){
            arr.push(curr.value)
            curr = curr.next;
        }
        console.log(arr);
    }
}

function merge(head1,head2){
    if(!head1&&!head2){
        return false;
    }
    var curr = head1;
    while(curr.next){
        curr = curr.next;
    }
    
    curr.next = head2;
    return head1;
}

function SortMerge(head1,head2){
    var link = new LinkedList();
    if(!head1&&!head2){
        return false;
    }
    var curr1 = head1;
    var curr2 = head2;
    while(curr1&&curr2){
        if(curr1.value<curr2.value){
            link.insert(curr1.value);
            curr1 = curr1.next;
        }else if(curr1.value>curr2.value){
            link.insert(curr2.value);
            curr2 = curr2.next;
        }
        else if(curr1.value===curr2.value){
            link.insert(curr1.value)
            curr1 = curr1.next;
            curr2 = curr2.next;
        }
    }
    
    while(curr1){
      link.insert(curr1.value)  
      curr1 = curr1.next;
    }
    while(curr2){
      link.insert(curr2.value)  
      curr2 = curr2.next;
    }
    return link;
}


var link1 = new LinkedList();
var link2 = new LinkedList();
link1.insert(2);
link1.insert(4)
link1.insert(5)
link1.insert(7)
link1.insert(9)
link2.insert(1)
link2.insert(2)
link2.insert(3)
link2.insert(5)
link2.insert(10)
link1.print();
link2.print();
var link =  SortMerge(link1.head,link2.head);
link.print()

